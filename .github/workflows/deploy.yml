name: Build-and-Deploy-Azure-Function

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read
  pages: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main

      - name: Show repo tree (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          pwd
          ls -la
          echo "Full tree:"
          ls -R

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Normalize line endings (CRLF -> LF) and make scripts executable
        run: |
          # convert common script types (CRLF -> LF)
          find . -type f \( -name '*.js' -o -name '*.sh' -o -name '*.py' \) -print0 \
            | xargs -0 -r sed -i 's/\r$//'
          # make CLI scripts executable if they have a shebang
          find . -type f -exec awk 'NR==1 && /^#!/{print FILENAME}' {} + | xargs -r chmod +x

      - name: Auto-detect project directory (where package.json lives)
        id: findproj
        run: |
          PKG=$(find . -type f -name package.json -print -quit || true)
          if [ -z "$PKG" ]; then
            echo "ERROR: no package.json found in repo. Exiting."
            exit 1
          fi
          DIR=$(dirname "$PKG")
          echo "Found package.json at: $PKG"
          echo "PROJECT_DIR=$DIR" >> $GITHUB_ENV
          echo "project_dir=$DIR" >> $GITHUB_OUTPUT

      - name: Install dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm install

      - name: Build (if applicable)
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm run build || echo "no build step"

      - name: Zip function package (write zip to repo root)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          ZIP_PATH="$GITHUB_WORKSPACE/function-package.zip"
          rm -f "$ZIP_PATH"
          zip -r "$ZIP_PATH" .
          echo "Created $ZIP_PATH"
          ls -lh "$ZIP_PATH"

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          auth-type: service_principal
      - name: Resolve function name and resource group (fallbacks)
        id: get_names
        run: |
          FN=""
          RG=""
          if [ -f terraform/terraform.tfstate ]; then
            FN=$(cd terraform && terraform output -raw function_name 2>/dev/null || true)
            RG=$(cd terraform && terraform output -raw resource_group 2>/dev/null || true)
          fi
          if [ -z "$FN" ]; then FN="demo-func-app"; fi
          if [ -z "$RG" ]; then RG="demo-func-rg"; fi
          echo "FUNCTION_NAME=$FN" >> $GITHUB_ENV
          echo "RG=$RG" >> $GITHUB_ENV
          echo "function_name=$FN" >> $GITHUB_OUTPUT
          echo "resource_group=$RG" >> $GITHUB_OUTPUT
          echo "Resolved FUNCTION_NAME=$FN and RG=$RG"

      - name: Deploy zip to Function App
        run: |
          echo "Deploying $FUNCTION_NAME in resource group $RG"
          az functionapp deployment source config-zip \
            --resource-group "$RG" \
            --name "$FUNCTION_NAME" \
            --src "$GITHUB_WORKSPACE/function-package.zip"

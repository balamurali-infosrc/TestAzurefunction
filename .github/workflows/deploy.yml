name: Build-and-Deploy-Azure-Function

on:
  push:
    branches: [ main ]
permissions:
      id-token: write
      contents: read
      pages: write
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Show repo tree (debug)
        # uncomment to debug file paths
        run: ls -R

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Normalize line endings (CRLF -> LF) and make scripts executable
        run: |
         # convert common script types
          find . -type f \( -name '*.js' -o -name '*.sh' -o -name '*.py' \) -print0 \
           | xargs -0 -r sed -i 's/\r$//'
         # make cli scripts executable if they have shebang
           find . -type f -exec awk 'NR==1 && /^#!/{print FILENAME}' {} + | xargs -r chmod +x


        # run: node path/to/script.js

      # - name: Run script
      #   run: node path/to/script.js

      - name: Install dependencies
        working-directory: function
        run: /usr/bin/bash -e -c "npm install"
        shell: /usr/bin/bash -e {0}

      - name: Build (if applicable)
        working-directory: function
        run: |
              npm run build || echo "no build step"

      - name: Zip function package (write zip to repo root)
        working-directory: function
        run: |
          ZIP_PATH="$GITHUB_WORKSPACE/function-package.zip"
          rm -f "$ZIP_PATH"
          zip -r "$ZIP_PATH" .
          echo "Created $ZIP_PATH"
          ls -lh "$ZIP_PATH"

      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get function name and resource group (from terraform outputs or fallbacks)
        id: get_names
        run: |
          # prefer terraform outputs if a state exists in terraform/
          if [ -f terraform/terraform.tfstate ]; then
            # Replace 'demo-func-app' and 'demo-func-rg' with your terraform output names
            FN=$(cd terraform && terraform output -raw demo-func-app 2>/dev/null || true)
            RG=$(cd terraform && terraform output -raw demo-func-rg 2>/dev/null || true)
          fi

          # Fallbacks if outputs not available
          if [ -z "demo-func-app" ]; then
            FN="demo-func-app"
          fi
          if [ -z "demo-func-rg" ]; then
            RG="demo-func-rg"
          fi

          echo "FUNCTION_NAME=demo-func-app" >> $GITHUB_ENV
          echo "RG=demo-func-rg" >> $GITHUB_ENV
          echo "function_name=demo-func-app" >> $GITHUB_OUTPUT
          echo "resource_group=demo-func-rg" >> $GITHUB_OUTPUT

      - name: Deploy zip to Function App
        run: |
          echo "Deploying demo-func-app in resource group demo-func-rg"
          az functionapp deployment source config-zip \
            --resource-group "demo-func-rg" \
            --name "demo-func-app" \
            --src "$GITHUB_WORKSPACE/function-package.zip"

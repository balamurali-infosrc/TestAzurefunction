name: Terraform Build-and-Deploy Azure Function

on:
  push:
    branches: [ main ]

permissions:
  id-token: write
  contents: read

jobs:
  terraform-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup Node (for function deployment)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Step 3: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      # Step 4: Azure login
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          auth-type: service_principal

      # Step 5: Terraform init
      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      # Step 6: Terraform plan (optional)
      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan

      # Step 7: Terraform apply
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      # Step 8: Get Terraform outputs (Function App and Resource Group)
      - name: Get Terraform outputs
        id: tfoutputs
        working-directory: terraform
        run: |
         # read raw outputs, take only first line and strip CRs to avoid bad formats
          FN=$(terraform output -raw function_name_name 2>/dev/null | sed -n '1p' | tr -d '\r')
          RG=$(terraform output -raw resource_group 2>/dev/null | sed -n '1p' | tr -d '\r')

          # debug: show captured values in the job log (optional)
          echo "Captured FN='$FN'"
          echo "Captured RG='$RG'"

          # write to GITHUB_ENV using the heredoc form (safe for any content)
           {
           printf 'FUNCTION_NAME<<EOF\n'
           printf '%s\n' "$FN"
           printf 'EOF\n'
           } >> $GITHUB_ENV

           {
           printf 'RG<<EOF\n'
           printf '%s\n' "$RG"
           printf 'EOF\n'
           } >> $GITHUB_ENV

            # also write to GITHUB_OUTPUT using heredoc (for composite actions / job outputs)
           {
           printf 'function_name<<EOF\n'
           printf '%s\n' "$FN"
           printf 'EOF\n'
           } >> $GITHUB_OUTPUT

           {
           printf 'resource_group<<EOF\n'
           printf '%s\n' "$RG"
            printf 'EOF\n'
           } >> $GITHUB_OUTPUT

     # FN=$(terraform output -raw function_name_name)
          # RG=$(terraform output -raw resource_group)
          # printf "FUNCTION_NAME=%s\n" "$FN" >> $GITHUB_ENV
          # printf "RG=%s\n" "$RG" >> $GITHUB_ENV
          # printf "function_name=%s\n" "$FN" >> $GITHUB_OUTPUT
          # printf "resource_group=%s\n" "$RG" >> $GITHUB_OUTPUT

      - name: Show workspace (debug)
        run: |
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          pwd
          ls -la

      # Build: set working-directory to where your function code actually lives.
      # Change src/function below to your real path (e.g. ./ or function-src/)
      - name: Build Function (npm)
        working-directory: src/function
        run: |
          # make sure dir exists â€” if not, create or fail with helpful message
          if [ ! -d "$PWD" ]; then
            echo "ERROR: working-directory src/function does not exist. ls output:"
            ls -la ..
            exit 1
          fi

          npm install
          npm run build || true   # if you have a build step; optional
          # produce deployment zip at repo root
          zip -r "$GITHUB_WORKSPACE/function-package.zip" .

      - name: Deploy Function App (zip)
        run: |
          echo "Deploying $FUNCTION_NAME to $RG"
          az login --service-principal -u "${{ secrets.AZURE_CLIENT_ID }}" -p "${{ secrets.AZURE_CLIENT_SECRET }}" --tenant "${{ secrets.AZURE_TENANT_ID }}"
          az functionapp deployment source config-zip \
            --resource-group "$RG" \
            --name "$FUNCTION_NAME" \
            --src "$GITHUB_WORKSPACE/function-package.zip"
        env:
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
